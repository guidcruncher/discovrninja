var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Address.html",[0,0.2,1,0.89]],["body/classes/Address.html",[0,0.235,1,1.66,2,1.371,3,0.573,4,0.573,5,0.48,6,2.537,7,0.48,8,1.54,9,1.981,10,2.24,11,2.24,12,2.589,13,1.181,14,4.066,15,1.292,16,0.053,17,1.181,18,3.16,19,3.16,20,2.736,21,3.16,22,2.537,23,3.16,24,1.82,25,0.573,26,0.04,27,0.04]],["title/controllers/AppController.html",[28,1.552,29,1.552]],["body/controllers/AppController.html",[0,0.255,3,0.622,4,0.622,5,0.52,7,0.52,13,0.853,16,0.053,17,1.065,25,0.622,26,0.042,27,0.042,28,2.465,29,2.465,30,2.752,31,2.752,32,1.858,33,3.925,34,3.428,35,3.428,36,3.428,37,1.488,38,1.065,39,1.709,40,2.026,41,2.752,42,3.428,43,3.428,44,3.428,45,1.709,46,3.428]],["title/modules/AppModule.html",[47,1.814,48,1.552]],["body/modules/AppModule.html",[0,0.2,3,0.488,4,0.488,5,0.408,16,0.054,24,2.682,25,0.488,26,0.036,27,0.036,29,2.39,30,2.934,38,1.195,39,1.341,40,2.084,41,2.16,47,2.793,48,2.766,49,1.81,50,1.549,51,2.16,52,2.16,53,1.549,54,3.332,55,2.16,56,2.16,57,2.16,58,2.934,59,2.16,60,2.16,61,2.69,62,2.69,63,2.69,64,2.16,65,2.16,66,2.69,67,2.16,68,2.69,69,1.81,70,2.69,71,3.655,72,3.655,73,3.655,74,3.655,75,2.69,76,2.16,77,3.655,78,3.655,79,2.69,80,2.69,81,2.69,82,2.69,83,2.16,84,2.69,85,2.69,86,2.69,87,2.69,88,2.69,89,2.69,90,2.69,91,2.69]],["title/injectables/AppService.html",[40,1.169,92,1.343]],["body/injectables/AppService.html",[0,0.269,3,0.656,4,0.656,5,0.549,7,0.549,13,0.9,16,0.052,17,1.101,25,0.656,26,0.043,27,0.043,32,1.92,33,4,37,1.57,38,0.9,39,1.803,40,1.92,45,1.803,92,2.206,93,2.435,94,2.905,95,3.618,96,3.618,97,3.618]],["title/classes/DiscoveryEntry.html",[0,0.2,98,1.021]],["body/classes/DiscoveryEntry.html",[0,0.17,1,1.509,2,0.994,3,0.416,4,0.416,5,0.348,7,0.348,8,1.237,9,2.045,10,1.142,11,1.142,12,2.194,13,1.234,15,1.405,16,0.054,17,1.281,24,1.319,25,0.416,26,0.032,27,0.032,38,0.57,98,1.443,99,1.839,100,3.058,101,2.564,102,2.564,103,3.058,104,3.058,105,2.194,106,3.058,107,3.058,108,3.058,109,3.268,110,2.291,111,2.291,112,2.291,113,2.291,114,2.291,115,2.291,116,2.291,117,2.291,118,1.839,119,2.291,120,2.291,121,2.291,122,2.291,123,2.291,124,2.291,125,2.291,126,2.291,127,2.291]],["title/classes/DiscoveryScan.html",[0,0.2,128,1.021]],["body/classes/DiscoveryScan.html",[0,0.23,2,1.341,3,0.561,4,0.561,5,0.469,7,0.469,8,1.518,9,1.973,12,2.562,13,1.171,15,1.278,16,0.053,17,0.997,25,0.561,26,0.039,27,0.039,38,0.769,98,1.684,128,1.684,129,2.482,130,4.448,131,4.448,132,4.448,133,4.008,134,4.448,135,3.091,136,3.091,137,3.091,138,3.091,139,1.541,140,3.091,141,3.091]],["title/classes/DnsEntry.html",[0,0.2,142,1.552]],["body/classes/DnsEntry.html",[0,0.249,1,1.525,2,1.452,3,0.607,4,0.607,5,0.508,7,0.508,8,1.597,9,1.932,12,2.659,13,1.149,15,1.212,16,0.053,17,1.206,22,2.687,25,0.607,26,0.041,27,0.041,142,2.659,143,2.687,144,3.107,145,4.217,146,3.347,147,3.347]],["title/injectables/DockerDiscoveryService.html",[92,1.343,148,1.814]],["body/injectables/DockerDiscoveryService.html",[0,0.071,1,0.945,3,0.174,4,0.174,5,0.145,7,0.145,9,0.814,10,1.269,11,1.071,13,0.83,15,0.823,16,0.055,17,1.098,24,0.551,25,0.174,26,0.033,27,0.016,32,0.711,37,1.448,38,0.914,39,0.477,45,1.754,92,0.817,93,0.644,98,1.182,100,0.768,101,0.644,102,0.644,103,0.768,104,0.768,105,1.797,106,1.315,107,0.768,108,0.768,118,0.768,128,0.814,139,1.754,144,1.103,148,1.103,149,0.768,150,3.007,151,2.545,152,1.639,153,1.639,154,2.149,155,1.639,156,2.149,157,1.713,158,0.957,159,3.121,160,1.639,161,0.957,162,1.926,163,1.926,164,0.957,165,1.832,166,1.639,167,0.957,168,2.862,169,0.957,170,2.862,171,0.957,172,1.639,173,1.426,174,1.639,175,0.957,176,0.957,177,3.121,178,0.957,179,1.446,180,0.957,181,0.957,182,0.957,183,0.768,184,0.957,185,0.957,186,1.426,187,0.957,188,0.944,189,0.957,190,0.644,191,0.957,192,1.446,193,1.446,194,3.258,195,2.149,196,1.639,197,0.957,198,0.957,199,1.446,200,1.103,201,1.639,202,0.957,203,0.957,204,0.957,205,0.957,206,0.957,207,0.957,208,2.545,209,0.957,210,2.149,211,0.957,212,0.957,213,0.957,214,0.957,215,0.957,216,0.957,217,0.957,218,0.957,219,2.149,220,1.639,221,1.639,222,0.957,223,1.639,224,0.957,225,0.957,226,0.957,227,1.639,228,0.957,229,1.639,230,0.644,231,0.957,232,0.957,233,0.957,234,0.957,235,0.957,236,0.957,237,0.957,238,0.957,239,1.639,240,1.639,241,0.957,242,0.957,243,0.644,244,0.644,245,0.957,246,0.957,247,0.957,248,0.957,249,0.644,250,0.957,251,0.957,252,0.957,253,0.957,254,0.957,255,1.639,256,0.957,257,1.639,258,2.149,259,1.639,260,0.957,261,1.639,262,1.639,263,0.957,264,0.768,265,1.639,266,0.957,267,0.957,268,0.957,269,0.957,270,1.639,271,0.644,272,0.957,273,2.149,274,0.957,275,2.862,276,1.446,277,2.149,278,0.957,279,0.957,280,0.644,281,0.957,282,0.644,283,0.957,284,1.103,285,0.957,286,0.644,287,1.639,288,1.639,289,0.957,290,0.644,291,2.149,292,0.957,293,0.957,294,0.957,295,0.957,296,0.957,297,0.957,298,0.957,299,0.957,300,0.957,301,0.957,302,0.957,303,0.957,304,0.957,305,0.957,306,0.957,307,0.957,308,0.957,309,0.957,310,0.957,311,0.957,312,0.957,313,0.957,314,0.957]],["title/interfaces/IAddress.html",[173,1.343,315,0.89]],["body/interfaces/IAddress.html",[0,0.111,1,1.107,3,0.272,4,0.272,5,0.227,7,0.227,8,0.899,9,1.598,10,1.67,11,1.67,15,0.847,16,0.055,17,1.194,20,1.983,25,0.431,26,0.023,27,0.023,38,1.012,45,2.337,69,1.008,98,0.568,128,0.568,139,1.82,150,1.008,165,1.183,173,1.468,186,0.747,190,1.008,192,1.597,193,1.983,194,2.995,199,1.983,200,1.597,230,2.255,243,1.008,244,1.597,249,1.597,271,1.008,276,1.008,280,1.008,282,1.597,284,1.597,286,1.008,290,1.008,315,0.495,316,0.863,317,1.008,318,1.203,319,1.203,320,1.203,321,1.203,322,2.365,323,1.203,324,1.203,325,1.203,326,1.203,327,1.203,328,1.203,329,1.203,330,1.203,331,1.203,332,1.203,333,1.905,334,1.203,335,1.203,336,1.203,337,2.69,338,1.203,339,1.203,340,1.203,341,1.203,342,1.203,343,1.203,344,2.365,345,1.203,346,1.203,347,1.203,348,1.203,349,1.203,350,1.203,351,1.203,352,1.203,353,1.203,354,1.203,355,1.203,356,1.203,357,1.203,358,1.203,359,1.203,360,1.905,361,1.905,362,1.905,363,1.203,364,1.203,365,2.365,366,1.203,367,1.203,368,1.203,369,1.203,370,1.905,371,1.905,372,1.905,373,1.203,374,1.905,375,1.203,376,1.905,377,1.203,378,1.203,379,1.905,380,1.203,381,1.203,382,1.203,383,1.905,384,1.203,385,1.905,386,1.203,387,1.203,388,1.203,389,1.203,390,1.203,391,1.203,392,1.203,393,1.203,394,1.203,395,1.203,396,1.203,397,1.203,398,1.203,399,1.203]],["title/interfaces/IDiscoveryAgent.html",[188,1.552,315,0.89]],["body/interfaces/IDiscoveryAgent.html",[3,0.665,4,0.665,5,0.556,7,0.556,13,0.912,16,0.052,25,0.665,26,0.044,27,0.044,32,1.936,37,1.59,38,0.912,128,1.388,157,3.367,165,2.223,188,2.769,315,1.211,316,2.11,400,2.942,401,3.665,402,3.665]],["title/interfaces/IDnsManager.html",[315,0.89,403,1.814]],["body/interfaces/IDnsManager.html",[3,0.507,4,0.507,5,0.424,7,0.424,13,1.174,15,1.3,16,0.052,17,1.209,25,0.507,26,0.037,27,0.037,32,1.628,37,2.048,38,0.696,105,2.606,142,2.858,144,2.524,162,3.045,163,3.045,165,2.514,179,2.524,315,0.924,316,1.61,403,2.849,404,2.245,405,3.752,406,3.752,407,3.752,408,3.752,409,3.752,410,2.796,411,2.796,412,3.752,413,2.796,414,3.752,415,2.796,416,3.012,417,3.752,418,2.796,419,2.796]],["title/classes/IpUtilities.html",[0,0.2,186,1.343]],["body/classes/IpUtilities.html",[0,0.091,1,0.403,2,0.53,3,0.222,4,0.222,5,0.185,7,0.185,9,1.872,10,0.608,11,0.608,13,1.007,15,1.075,16,0.054,17,1.178,20,0.822,25,0.365,26,0.02,27,0.02,32,0.873,37,1.757,38,0.93,45,2.215,69,0.822,98,0.462,102,0.822,105,2.25,128,0.462,139,1.638,150,1.725,157,1.353,162,2.629,163,2.629,165,1.482,173,1.482,179,1.353,186,1.002,190,0.822,192,1.353,193,1.725,194,2.806,199,1.725,200,1.353,230,2,243,0.822,244,1.353,249,1.353,271,1.353,276,0.822,280,0.822,282,1.353,284,1.353,286,0.822,290,0.822,315,0.403,317,0.822,318,0.98,319,0.98,320,0.98,321,0.98,322,2.058,323,0.98,324,0.98,325,0.98,326,0.98,327,1.614,328,0.98,329,1.614,330,0.98,331,0.98,332,1.614,333,1.614,334,0.98,335,0.98,336,0.98,337,2.387,338,0.98,339,2.387,340,0.98,341,0.98,342,0.98,343,0.98,344,2.058,345,0.98,346,0.98,347,0.98,348,0.98,349,0.98,350,0.98,351,1.614,352,0.98,353,0.98,354,0.98,355,0.98,356,0.98,357,0.98,358,0.98,359,0.98,360,1.614,361,1.614,362,1.614,363,0.98,364,1.614,365,3.25,366,0.98,367,0.98,368,0.98,369,1.614,370,2.839,371,1.614,372,1.614,373,0.98,374,1.614,375,0.98,376,1.614,377,0.98,378,1.614,379,1.614,380,0.98,381,0.98,382,0.98,383,1.614,384,1.614,385,1.614,386,0.98,387,0.98,388,1.614,389,0.98,390,0.98,391,0.98,392,0.98,393,0.98,394,0.98,395,0.98,396,0.98,397,0.98,398,0.98,399,0.98,416,0.98,420,2.011,421,2.011,422,2.011,423,2.011,424,2.011,425,2.011,426,2.011,427,2.011,428,1.221,429,1.221,430,1.221,431,1.221,432,1.221,433,1.221,434,1.221,435,1.221,436,1.221,437,1.221]],["title/coverage.html",[438,2.938]],["body/coverage.html",[0,0.36,1,0.999,5,0.459,6,2.429,15,0.869,16,0.052,26,0.039,27,0.039,28,1.742,29,1.742,31,2.429,40,1.313,53,1.742,76,2.429,92,1.97,94,2.429,98,1.146,99,2.429,128,1.146,129,2.429,139,1.508,142,1.742,143,2.429,148,2.036,149,2.429,173,1.508,186,1.508,188,1.742,264,4.261,315,1.454,317,2.66,400,2.429,403,2.036,404,2.429,438,2.429,439,3.025,440,3.025,441,4.402,442,3.025,443,3.952,444,2.429,445,3.025,446,3.025,447,3.025,448,3.952,449,3.025,450,3.025,451,3.025,452,3.025]],["title/dependencies.html",[50,1.864,453,1.814]],["body/dependencies.html",[16,0.053,26,0.043,27,0.043,39,1.773,50,2.049,64,2.856,65,2.856,67,2.856,83,2.856,183,2.856,454,3.557,455,3.557,456,4.38,457,3.557,458,3.557,459,3.557,460,3.557,461,4.38,462,3.557,463,3.557,464,3.557,465,3.557,466,3.557,467,3.557,468,3.557,469,3.557,470,3.557,471,3.557,472,3.557]],["title/miscellaneous/functions.html",[473,1.814,474,2.598]],["body/miscellaneous/functions.html",[7,0.62,16,0.047,26,0.047,27,0.047,53,2.901,444,3.282,473,3.282,474,3.282,475,4.088]],["title/index.html",[7,0.343,476,2.26,477,2.26]],["body/index.html",[16,0.048,26,0.048,27,0.048]],["title/modules.html",[49,2.463]],["body/modules.html",[16,0.047,26,0.047,27,0.047,48,2.377,49,2.778,478,4.128,479,4.128,480,4.128,481,4.128]],["title/overview.html",[482,2.938]],["body/overview.html",[2,1.59,16,0.047,26,0.044,27,0.044,28,2.11,40,2.087,47,3.002,48,2.882,50,2.11,51,2.942,52,2.942,53,2.11,54,2.942,55,2.942,56,2.942,57,2.942,58,3.581,59,2.942,60,2.942,93,2.466,316,2.11,482,2.942,483,4.461,484,3.665,485,3.665,486,3.665]],["title/properties.html",[8,1.226,453,1.814]],["body/properties.html",[8,1.505,16,0.052,26,0.046,27,0.046,101,2.674,487,3.973,488,3.973,489,3.973,490,3.973,491,3.973,492,3.973,493,3.973,494,3.973]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":264,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":488,"title":{},"body":{"properties.html":{}}}],["0.2.0",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["0.3.166",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":443,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":483,"title":{},"body":{"overview.html":{}}}],["10.0.0",{"_index":456,"title":{},"body":{"dependencies.html":{}}}],["10.4.6",{"_index":459,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":356,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["2",{"_index":484,"title":{},"body":{"overview.html":{}}}],["2000",{"_index":358,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["3",{"_index":486,"title":{},"body":{"overview.html":{}}}],["4",{"_index":335,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["4.0.2",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":460,"title":{},"body":{"dependencies.html":{}}}],["443",{"_index":256,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["5",{"_index":485,"title":{},"body":{"overview.html":{}}}],["500",{"_index":363,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["6.4.0",{"_index":455,"title":{},"body":{"dependencies.html":{}}}],["7.4.2",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["a.containername.localecompare(b.containername",{"_index":250,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["a.hostname.localecompare(b.hostname",{"_index":375,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["a.network",{"_index":367,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["a.sourceaddress.address",{"_index":373,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["a.status",{"_index":231,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["a.targetaddress",{"_index":385,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["a.targetaddress.localecompare(b.targetaddress",{"_index":386,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["addr",{"_index":337,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["addr.address",{"_index":275,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["addr.address.padend(16",{"_index":368,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["addr.network",{"_index":272,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["addr.padend(16",{"_index":382,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["addr.preferred",{"_index":270,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["address",{"_index":1,"title":{"classes/Address.html":{}},"body":{"classes/Address.html":{},"classes/DiscoveryEntry.html":{},"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{},"coverage.html":{}}}],["address.address",{"_index":301,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["address.preferred",{"_index":299,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["addresspromises",{"_index":205,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["addresspromises.push",{"_index":239,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["api",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["appcontroller",{"_index":29,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":48,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":40,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":437,"title":{},"body":{"classes/IpUtilities.html":{}}}],["array.from(array.reduce((set",{"_index":328,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["author",{"_index":493,"title":{},"body":{"properties.html":{}}}],["b",{"_index":249,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["b.value",{"_index":233,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["boolean",{"_index":20,"title":{},"body":{"classes/Address.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["bootstrap",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":481,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":478,"title":{},"body":{"modules.html":{}}}],["c.id",{"_index":235,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["cachecontrol",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["catch",{"_index":289,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["checkurllive",{"_index":420,"title":{},"body":{"classes/IpUtilities.html":{}}}],["checkurllive(url",{"_index":351,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["class",{"_index":0,"title":{"classes/Address.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"classes/IpUtilities.html":{}},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Address.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"classes/IpUtilities.html":{},"overview.html":{}}}],["client",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["conf",{"_index":394,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["console.log(\"trying",{"_index":352,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["console.log(this.converttargettohostentry(e",{"_index":395,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["console.log(url.address",{"_index":361,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["const",{"_index":194,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"classes/Address.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{}}}],["constructor(private",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["container",{"_index":177,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["container.config.hostname",{"_index":216,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["container.config.labels[\"homepage.description",{"_index":213,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["container.config.labels[\"homepage.href",{"_index":218,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["container.config.labels[\"homepage.icon",{"_index":214,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["container.config.labels[\"homepage.name",{"_index":212,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["container.config.labels[\"homepage.sourceaddress",{"_index":223,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["container.config.labels[\"homepage.targetaddress",{"_index":221,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["container.hostconfig.networkmode",{"_index":210,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["container.inspect(function",{"_index":310,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["container.name",{"_index":215,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["container.networksettings",{"_index":220,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["containerid",{"_index":227,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["containername",{"_index":100,"title":{},"body":{"classes/DiscoveryEntry.html":{},"injectables/DockerDiscoveryService.html":{}}}],["containers",{"_index":198,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["containers.foreach((container",{"_index":202,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["contains",{"_index":405,"title":{},"body":{"interfaces/IDnsManager.html":{}}}],["contains(host",{"_index":409,"title":{},"body":{"interfaces/IDnsManager.html":{}}}],["controller",{"_index":28,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["controllers/app.controller",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["convertsourcetohostentry",{"_index":421,"title":{},"body":{"classes/IpUtilities.html":{}}}],["convertsourcetohostentry(entry",{"_index":364,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["convertsourcetohosts",{"_index":422,"title":{},"body":{"classes/IpUtilities.html":{}}}],["convertsourcetohosts(scan",{"_index":369,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["converttargettohostentry",{"_index":423,"title":{},"body":{"classes/IpUtilities.html":{}}}],["converttargettohostentry(entry",{"_index":378,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["converttargettohosts",{"_index":424,"title":{},"body":{"classes/IpUtilities.html":{}}}],["converttargettohosts(scan",{"_index":384,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["coverage",{"_index":438,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":130,"title":{},"body":{"classes/DiscoveryScan.html":{}}}],["createdocker",{"_index":151,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["createhash",{"_index":181,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["createhash(\"sha256",{"_index":252,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["currentport",{"_index":305,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["customtypes/address",{"_index":118,"title":{},"body":{"classes/DiscoveryEntry.html":{},"injectables/DockerDiscoveryService.html":{}}}],["customtypes/discoveryentry",{"_index":137,"title":{},"body":{"classes/DiscoveryScan.html":{}}}],["customtypes/discoveryscan",{"_index":402,"title":{},"body":{"interfaces/IDiscoveryAgent.html":{}}}],["customtypes/dnsentry",{"_index":419,"title":{},"body":{"interfaces/IDnsManager.html":{}}}],["data",{"_index":311,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["date",{"_index":134,"title":{},"body":{"classes/DiscoveryScan.html":{}}}],["deadline",{"_index":355,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["declarations",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decoratereply",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["defined",{"_index":13,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{}}}],["dependencies",{"_index":50,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":101,"title":{},"body":{"classes/DiscoveryEntry.html":{},"injectables/DockerDiscoveryService.html":{},"properties.html":{}}}],["digest(\"base64",{"_index":254,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["discovery/discoveryentry",{"_index":184,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["discovery/discoveryscan",{"_index":185,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["discoveryentry",{"_index":98,"title":{"classes/DiscoveryEntry.html":{}},"body":{"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{},"coverage.html":{}}}],["discoveryscan",{"_index":128,"title":{"classes/DiscoveryScan.html":{}},"body":{"classes/DiscoveryScan.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"interfaces/IDiscoveryAgent.html":{},"classes/IpUtilities.html":{},"coverage.html":{}}}],["discovrninja",{"_index":489,"title":{},"body":{"properties.html":{}}}],["dist",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["dns",{"_index":318,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["dns.lookup(hostname",{"_index":336,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["dnsentry",{"_index":142,"title":{"classes/DnsEntry.html":{}},"body":{"classes/DnsEntry.html":{},"interfaces/IDnsManager.html":{},"coverage.html":{}}}],["docker",{"_index":159,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["docker.getcontainer(id",{"_index":309,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["docker.listcontainers((err",{"_index":197,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["dockerdiscoveryservice",{"_index":148,"title":{"injectables/DockerDiscoveryService.html":{}},"body":{"injectables/DockerDiscoveryService.html":{},"coverage.html":{}}}],["dockerode",{"_index":183,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"dependencies.html":{}}}],["docs",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["e",{"_index":329,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["e.targetaddress",{"_index":389,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["encoding",{"_index":398,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["end((err",{"_index":359,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["entries",{"_index":131,"title":{},"body":{"classes/DiscoveryScan.html":{}}}],["entry",{"_index":179,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{}}}],["entry.hostname",{"_index":286,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["entry.ipaddresses.find",{"_index":366,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["entry.ports.foreach((port",{"_index":268,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["entry.ports.length",{"_index":263,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["entry.sourceaddress",{"_index":280,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["entry.sourceaddress.address",{"_index":284,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["entry.sourceaddress.network",{"_index":290,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["entry.targetaddress",{"_index":379,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["err",{"_index":199,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["err.status",{"_index":360,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["error",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["etag",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["expect",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["export",{"_index":25,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{}}}],["exports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["false",{"_index":24,"title":{},"body":{"classes/Address.html":{},"modules/AppModule.html":{},"classes/DiscoveryEntry.html":{},"injectables/DockerDiscoveryService.html":{}}}],["family",{"_index":334,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["fastify",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["fastify/static",{"_index":454,"title":{},"body":{"dependencies.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{},"coverage.html":{}}}],["filename",{"_index":391,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["filter((a",{"_index":230,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["find((c",{"_index":234,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["fs",{"_index":325,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["fs.writefilesync(filename",{"_index":396,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["fulfilled",{"_index":208,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["fulfilled.foreach((value",{"_index":246,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["function",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":474,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(\"home",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["get('home",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["getcontainer",{"_index":152,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["getcontainer(id",{"_index":160,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["gethello",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethostipaddress",{"_index":339,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["getipaddress",{"_index":425,"title":{},"body":{"classes/IpUtilities.html":{}}}],["getipaddress(hostname",{"_index":332,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["getscheme",{"_index":153,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["getscheme(port",{"_index":166,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["getting",{"_index":476,"title":{"index.html":{}},"body":{}}],["gnu",{"_index":492,"title":{},"body":{"properties.html":{}}}],["guidcruncher",{"_index":494,"title":{},"body":{"properties.html":{}}}],["hash",{"_index":132,"title":{},"body":{"classes/DiscoveryScan.html":{}}}],["head(url.address",{"_index":353,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["hello",{"_index":96,"title":{},"body":{"injectables/AppService.html":{}}}],["helpers/iputilities",{"_index":187,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["host",{"_index":144,"title":{},"body":{"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IDnsManager.html":{}}}],["hostipaddress",{"_index":261,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["hostname",{"_index":102,"title":{},"body":{"classes/DiscoveryEntry.html":{},"injectables/DockerDiscoveryService.html":{},"classes/IpUtilities.html":{}}}],["http",{"_index":258,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["https",{"_index":257,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["iaddress",{"_index":173,"title":{"interfaces/IAddress.html":{}},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{},"coverage.html":{}}}],["icon",{"_index":103,"title":{},"body":{"classes/DiscoveryEntry.html":{},"injectables/DockerDiscoveryService.html":{}}}],["id",{"_index":164,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["identifier",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["idiscoveryagent",{"_index":188,"title":{"interfaces/IDiscoveryAgent.html":{}},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IDiscoveryAgent.html":{},"coverage.html":{}}}],["idiscoveryentry",{"_index":365,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["idiscoveryscan",{"_index":370,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["idnsmanager",{"_index":403,"title":{"interfaces/IDnsManager.html":{}},"body":{"interfaces/IDnsManager.html":{},"coverage.html":{}}}],["implements",{"_index":191,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["import",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{}}}],["imports",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{}}}],["injectable",{"_index":92,"title":{"injectables/AppService.html":{},"injectables/DockerDiscoveryService.html":{}},"body":{"injectables/AppService.html":{},"injectables/DockerDiscoveryService.html":{},"coverage.html":{}}}],["injectables",{"_index":93,"title":{},"body":{"injectables/AppService.html":{},"injectables/DockerDiscoveryService.html":{},"overview.html":{}}}],["interface",{"_index":315,"title":{"interfaces/IAddress.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{}},"body":{"interfaces/IAddress.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{},"coverage.html":{}}}],["interfacename",{"_index":342,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["interfaces",{"_index":316,"title":{},"body":{"interfaces/IAddress.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"overview.html":{}}}],["ipaddresses",{"_index":104,"title":{},"body":{"classes/DiscoveryEntry.html":{},"injectables/DockerDiscoveryService.html":{}}}],["iputilities",{"_index":186,"title":{"classes/IpUtilities.html":{}},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{},"coverage.html":{}}}],["iputils",{"_index":259,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["iputils.gethostipaddress",{"_index":262,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["ipv4",{"_index":348,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["join",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":291,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["key.includes(\"udp",{"_index":304,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["key.replace(\"/tcp",{"_index":306,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["keyof",{"_index":294,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["legend",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["license",{"_index":491,"title":{},"body":{"properties.html":{}}}],["map((a",{"_index":376,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["map((b",{"_index":232,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["metadata",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{}}}],["miscellaneous",{"_index":473,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["missing",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["module",{"_index":47,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":49,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["n.preferred",{"_index":267,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["name",{"_index":105,"title":{},"body":{"classes/DiscoveryEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{}}}],["nestjs",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/common",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/DockerDiscoveryService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":457,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":458,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["net",{"_index":346,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["net.address",{"_index":350,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["net.family",{"_index":347,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["net.internal",{"_index":349,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["network",{"_index":10,"title":{},"body":{"classes/Address.html":{},"classes/DiscoveryEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["network.ipaddress",{"_index":298,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["network.networkid",{"_index":297,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["networkinterface",{"_index":344,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["networkinterfaces",{"_index":340,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["networkinterfaces[interfacename",{"_index":345,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["networkmode",{"_index":170,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["networkmode.split(\":\")[1",{"_index":228,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["networkmode.startswith(\"container",{"_index":226,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["networks",{"_index":260,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["networks.find((n",{"_index":266,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["networks.foreach((addr",{"_index":269,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["networksettings",{"_index":172,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["networksettings.networks",{"_index":296,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["networksettings.networks[key",{"_index":293,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["new",{"_index":139,"title":{},"body":{"classes/DiscoveryScan.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{},"coverage.html":{}}}],["node:crypto",{"_index":182,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["node:dns",{"_index":319,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["node:fs",{"_index":326,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["node:os",{"_index":321,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["node:path",{"_index":324,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["object.keys(networkinterfaces",{"_index":343,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["object.keys(networksettings.networks",{"_index":292,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["object.keys(ports).foreach((key",{"_index":303,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["option",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["optional",{"_index":163,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{}}}],["options",{"_index":333,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["os",{"_index":320,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["os.networkinterfaces",{"_index":341,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["out",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["overview",{"_index":482,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":453,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":162,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{}}}],["parentcontainer",{"_index":229,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["parentcontainer.hostconfig.networkmode",{"_index":238,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["parentcontainer.networksettings",{"_index":237,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["path",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["path.join",{"_index":392,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["port",{"_index":168,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["ports",{"_index":106,"title":{},"body":{"classes/DiscoveryEntry.html":{},"injectables/DockerDiscoveryService.html":{}}}],["preferred",{"_index":11,"title":{},"body":{"classes/Address.html":{},"classes/DiscoveryEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["preferrednetwork",{"_index":265,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["private",{"_index":150,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["process.env.dnshosts",{"_index":393,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["promise",{"_index":165,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{}}}],["promise((resolve",{"_index":192,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["promise.allsettled(addresspromises).then((results",{"_index":241,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["promise.allsettled(promises).then((results",{"_index":204,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["promise.any(promises",{"_index":278,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["promise.status",{"_index":207,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["promise.value",{"_index":209,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["promisefulfilledresult",{"_index":245,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["promises",{"_index":201,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["promises.push(iputils.checkurllive(url",{"_index":277,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["promises.push(this.getcontainer(container.id",{"_index":203,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/Address.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"interfaces/IAddress.html":{},"properties.html":{}}}],["providers",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["public",{"_index":9,"title":{},"body":{"classes/Address.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["pushtodns",{"_index":406,"title":{},"body":{"interfaces/IDnsManager.html":{}}}],["pushtodns(entry",{"_index":412,"title":{},"body":{"interfaces/IDnsManager.html":{}}}],["readonly",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["record",{"_index":211,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["record.ipaddresses",{"_index":236,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["record.sourceaddress.address",{"_index":224,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["record.targetaddress",{"_index":222,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["reference",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["reflect",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["reject",{"_index":193,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["reject(err",{"_index":200,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["remove",{"_index":407,"title":{},"body":{"interfaces/IDnsManager.html":{}}}],["remove(entry",{"_index":414,"title":{},"body":{"interfaces/IDnsManager.html":{}}}],["res",{"_index":243,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["res.status",{"_index":244,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["reset",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["resolve",{"_index":408,"title":{},"body":{"interfaces/IDnsManager.html":{}}}],["resolve(addr",{"_index":338,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["resolve(data",{"_index":312,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["resolve(entry",{"_index":288,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["resolve(host",{"_index":417,"title":{},"body":{"interfaces/IDnsManager.html":{}}}],["resolve(result",{"_index":255,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["resolve(url",{"_index":362,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["resolvenetworks",{"_index":154,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["resolvenetworks(networksettings",{"_index":169,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["resolveports",{"_index":155,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["resolveports(ports",{"_index":174,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["resolvesourceaddress",{"_index":156,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["resolvesourceaddress(entry",{"_index":176,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["response",{"_index":357,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["result",{"_index":195,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["result.entries.push(record",{"_index":225,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["result.entries.push(value.value",{"_index":247,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["result.entries.sort((a",{"_index":248,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["result.hash",{"_index":251,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["result.network",{"_index":281,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["results",{"_index":26,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["results.filter",{"_index":242,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["results.foreach((promise",{"_index":206,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["results.includes(currentport",{"_index":307,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["results.push(address",{"_index":302,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["results.push(currentport",{"_index":308,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["return",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["returns",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{}}}],["rootpath",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["rxjs",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["savednsconfig",{"_index":426,"title":{},"body":{"classes/IpUtilities.html":{}}}],["savednsconfig(e",{"_index":388,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["scalar/nestjs",{"_index":464,"title":{},"body":{"dependencies.html":{}}}],["scan",{"_index":157,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IDiscoveryAgent.html":{},"classes/IpUtilities.html":{}}}],["scan.entries",{"_index":372,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["schedulemodule",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["scheme",{"_index":273,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["serveroot",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticoptions",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":490,"title":{},"body":{"properties.html":{}}}],["services/app.service",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["set",{"_index":331,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["set.add(e",{"_index":330,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["socketpath",{"_index":313,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["sort((a",{"_index":374,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"interfaces/IDiscoveryAgent.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{}}}],["sourceaddress",{"_index":107,"title":{},"body":{"classes/DiscoveryEntry.html":{},"injectables/DockerDiscoveryService.html":{}}}],["src/.../main.ts",{"_index":475,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["src/controllers/app.controller.ts",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/controllers/app.controller.ts:9",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["src/helper/iputilities.ts",{"_index":317,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{},"coverage.html":{}}}],["src/helper/iputilities.ts:10",{"_index":436,"title":{},"body":{"classes/IpUtilities.html":{}}}],["src/helper/iputilities.ts:109",{"_index":432,"title":{},"body":{"classes/IpUtilities.html":{}}}],["src/helper/iputilities.ts:118",{"_index":435,"title":{},"body":{"classes/IpUtilities.html":{}}}],["src/helper/iputilities.ts:14",{"_index":434,"title":{},"body":{"classes/IpUtilities.html":{}}}],["src/helper/iputilities.ts:27",{"_index":433,"title":{},"body":{"classes/IpUtilities.html":{}}}],["src/helper/iputilities.ts:42",{"_index":428,"title":{},"body":{"classes/IpUtilities.html":{}}}],["src/helper/iputilities.ts:72",{"_index":429,"title":{},"body":{"classes/IpUtilities.html":{}}}],["src/helper/iputilities.ts:90",{"_index":430,"title":{},"body":{"classes/IpUtilities.html":{}}}],["src/helper/iputilities.ts:99",{"_index":431,"title":{},"body":{"classes/IpUtilities.html":{}}}],["src/main.ts",{"_index":444,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/services/app.service.ts",{"_index":94,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/services/app.service.ts:5",{"_index":95,"title":{},"body":{"injectables/AppService.html":{}}}],["src/services/docker.discovery.ts",{"_index":149,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"coverage.html":{}}}],["src/services/docker.discovery.ts:106",{"_index":167,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["src/services/docker.discovery.ts:113",{"_index":178,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["src/services/docker.discovery.ts:14",{"_index":180,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["src/services/docker.discovery.ts:181",{"_index":171,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["src/services/docker.discovery.ts:205",{"_index":175,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["src/services/docker.discovery.ts:218",{"_index":161,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["src/services/docker.discovery.ts:232",{"_index":158,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["src/types/address.ts",{"_index":6,"title":{},"body":{"classes/Address.html":{},"coverage.html":{}}}],["src/types/address.ts:2",{"_index":19,"title":{},"body":{"classes/Address.html":{}}}],["src/types/address.ts:4",{"_index":18,"title":{},"body":{"classes/Address.html":{}}}],["src/types/address.ts:6",{"_index":14,"title":{},"body":{"classes/Address.html":{}}}],["src/types/discoveryentry.ts",{"_index":99,"title":{},"body":{"classes/DiscoveryEntry.html":{},"coverage.html":{}}}],["src/types/discoveryentry.ts:10",{"_index":116,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["src/types/discoveryentry.ts:12",{"_index":117,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["src/types/discoveryentry.ts:14",{"_index":110,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["src/types/discoveryentry.ts:16",{"_index":112,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["src/types/discoveryentry.ts:18",{"_index":115,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["src/types/discoveryentry.ts:20",{"_index":109,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["src/types/discoveryentry.ts:4",{"_index":114,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["src/types/discoveryentry.ts:6",{"_index":111,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["src/types/discoveryentry.ts:8",{"_index":113,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["src/types/discoveryscan.ts",{"_index":129,"title":{},"body":{"classes/DiscoveryScan.html":{},"coverage.html":{}}}],["src/types/discoveryscan.ts:4",{"_index":135,"title":{},"body":{"classes/DiscoveryScan.html":{}}}],["src/types/discoveryscan.ts:6",{"_index":136,"title":{},"body":{"classes/DiscoveryScan.html":{}}}],["src/types/discoveryscan.ts:8",{"_index":133,"title":{},"body":{"classes/DiscoveryScan.html":{}}}],["src/types/dnsentry.ts",{"_index":143,"title":{},"body":{"classes/DnsEntry.html":{},"coverage.html":{}}}],["src/types/dnsentry.ts:2",{"_index":146,"title":{},"body":{"classes/DnsEntry.html":{}}}],["src/types/dnsentry.ts:4",{"_index":145,"title":{},"body":{"classes/DnsEntry.html":{}}}],["src/types/idiscoveryagent.ts",{"_index":400,"title":{},"body":{"interfaces/IDiscoveryAgent.html":{},"coverage.html":{}}}],["src/types/idiscoveryagent.ts:4",{"_index":401,"title":{},"body":{"interfaces/IDiscoveryAgent.html":{}}}],["src/types/idnsmanager.ts",{"_index":404,"title":{},"body":{"interfaces/IDnsManager.html":{},"coverage.html":{}}}],["src/types/idnsmanager.ts:4",{"_index":413,"title":{},"body":{"interfaces/IDnsManager.html":{}}}],["src/types/idnsmanager.ts:5",{"_index":415,"title":{},"body":{"interfaces/IDnsManager.html":{}}}],["src/types/idnsmanager.ts:6",{"_index":410,"title":{},"body":{"interfaces/IDnsManager.html":{}}}],["src/types/idnsmanager.ts:7",{"_index":418,"title":{},"body":{"interfaces/IDnsManager.html":{}}}],["src/types/idnsmanager.ts:8",{"_index":411,"title":{},"body":{"interfaces/IDnsManager.html":{}}}],["started",{"_index":477,"title":{"index.html":{}},"body":{}}],["statements",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["string",{"_index":17,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{}}}],["superagent",{"_index":322,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["support",{"_index":479,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":480,"title":{},"body":{"modules.html":{}}}],["table",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["targetaddress",{"_index":108,"title":{},"body":{"classes/DiscoveryEntry.html":{},"injectables/DockerDiscoveryService.html":{}}}],["then((result",{"_index":279,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["this.address",{"_index":22,"title":{},"body":{"classes/Address.html":{},"classes/DnsEntry.html":{}}}],["this.appservice.gethello",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["this.containername",{"_index":125,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["this.convertsourcetohostentry(a",{"_index":377,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["this.converttargettohostentry(a",{"_index":387,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["this.converttargettohostentry(e",{"_index":397,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["this.created",{"_index":138,"title":{},"body":{"classes/DiscoveryScan.html":{}}}],["this.createdocker",{"_index":196,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["this.description",{"_index":120,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["this.entries",{"_index":141,"title":{},"body":{"classes/DiscoveryScan.html":{}}}],["this.gethostipaddress",{"_index":381,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["this.getscheme(port",{"_index":274,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["this.hash",{"_index":140,"title":{},"body":{"classes/DiscoveryScan.html":{}}}],["this.host",{"_index":147,"title":{},"body":{"classes/DnsEntry.html":{}}}],["this.hostname",{"_index":126,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["this.icon",{"_index":121,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["this.ipaddresses",{"_index":127,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["this.name",{"_index":119,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["this.network",{"_index":21,"title":{},"body":{"classes/Address.html":{}}}],["this.ports",{"_index":122,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["this.preferred",{"_index":23,"title":{},"body":{"classes/Address.html":{}}}],["this.resolvenetworks",{"_index":219,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["this.resolveports(container.config.exposedports",{"_index":217,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["this.resolvesourceaddress(record",{"_index":240,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["this.sourceaddress",{"_index":123,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["this.targetaddress",{"_index":124,"title":{},"body":{"classes/DiscoveryEntry.html":{}}}],["this.uniquearray",{"_index":371,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["timeout",{"_index":354,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["true",{"_index":300,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["ts",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["type",{"_index":15,"title":{},"body":{"classes/Address.html":{},"classes/DiscoveryEntry.html":{},"classes/DiscoveryScan.html":{},"classes/DnsEntry.html":{},"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{},"coverage.html":{}}}],["typeof",{"_index":295,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["types/discoveryentry",{"_index":323,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["types/discoveryscan",{"_index":190,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["types/idiscoveryagent",{"_index":189,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["typings",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["uniquearray",{"_index":427,"title":{},"body":{"classes/IpUtilities.html":{}}}],["uniquearray(array",{"_index":327,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["update(json.stringify(result.entries",{"_index":253,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["uri",{"_index":282,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["uri.hostname",{"_index":383,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["uri.port",{"_index":287,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["uri.protocol",{"_index":285,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["url",{"_index":271,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["url(e.targetaddress",{"_index":390,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["url(entry.targetaddress",{"_index":380,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["url(result.address",{"_index":283,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["url.address",{"_index":276,"title":{},"body":{"injectables/DockerDiscoveryService.html":{},"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["utf8",{"_index":399,"title":{},"body":{"interfaces/IAddress.html":{},"classes/IpUtilities.html":{}}}],["var/run/docker.sock",{"_index":314,"title":{},"body":{"injectables/DockerDiscoveryService.html":{}}}],["version",{"_index":487,"title":{},"body":{"properties.html":{}}}],["void",{"_index":416,"title":{},"body":{"interfaces/IDnsManager.html":{},"classes/IpUtilities.html":{}}}],["world",{"_index":97,"title":{},"body":{"injectables/AppService.html":{}}}],["zoom",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Address.html":{"url":"classes/Address.html","title":"class - Address","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/address.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                address\n                            \n                            \n                                    Public\n                                network\n                            \n                            \n                                    Public\n                                preferred\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/types/address.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/address.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/address.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        preferred\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/types/address.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        class Address {\n  public network: string;\n\n  public address: string;\n\n  public preferred: boolean;\n\n  constructor() {\n    this.network = \"\";\n    this.address = \"\";\n    this.preferred = false;\n  }\n}\n\nexport { Address };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('home')\n                \n            \n\n                    \n                        \n                            Defined in src/controllers/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { AppService } from \"@services/app.service\";\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get(\"home\")\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { AppController } from \"@controllers/app.controller\";\nimport { AppService } from \"@services/app.service\";\nimport { ServeStaticModule } from \"@nestjs/serve-static\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\nimport { join } from \"path\";\n\n@Module({\n  imports: [\n    ServeStaticModule.forRoot({\n      serveStaticOptions: {\n        cacheControl: false,\n        etag: false,\n      },\n      serveRoot: \"/documentation/\",\n      rootPath: join(__dirname, \"..\", \"docs\"),\n    }),\n    ServeStaticModule.forRoot({\n      serveStaticOptions: {\n        cacheControl: false,\n        etag: false,\n        // @ts-expect-error Fastify option which is missing in nestjs typings\n        decorateReply: false,\n      },\n      rootPath: join(__dirname, \"..\", \"client\", \"dist\"),\n    }),\n    ScheduleModule.forRoot(),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return \"Hello World!\";\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiscoveryEntry.html":{"url":"classes/DiscoveryEntry.html","title":"class - DiscoveryEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscoveryEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/discoveryentry.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                containerName\n                            \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                hostname\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                ipAddresses\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                ports\n                            \n                            \n                                    Public\n                                sourceAddress\n                            \n                            \n                                    Public\n                                targetAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/types/discoveryentry.ts:20\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        containerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/discoveryentry.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/discoveryentry.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hostname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/discoveryentry.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/discoveryentry.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ipAddresses\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address[]\n\n                    \n                \n                    \n                        \n                                Defined in src/types/discoveryentry.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/discoveryentry.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/types/discoveryentry.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sourceAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                    \n                        \n                                Defined in src/types/discoveryentry.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        targetAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/discoveryentry.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Address } from \"@customtypes/address\";\n\nclass DiscoveryEntry {\n  public name: string;\n\n  public description: string;\n\n  public icon: string;\n\n  public sourceAddress: Address;\n\n  public targetAddress: string;\n\n  public containerName: string;\n\n  public hostname: string;\n\n  public ports: string[];\n\n  public ipAddresses: Address[];\n\n  constructor() {\n    this.name = \"\";\n    this.description = \"\";\n    this.icon = \"\";\n    this.ports = [];\n    this.sourceAddress = { network: \"\", address: \"\", preferred: false };\n    this.targetAddress = \"\";\n    this.containerName = \"\";\n    this.hostname = \"\";\n    this.ipAddresses = [];\n  }\n}\n\nexport { DiscoveryEntry };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiscoveryScan.html":{"url":"classes/DiscoveryScan.html","title":"class - DiscoveryScan","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscoveryScan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/discoveryscan.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                created\n                            \n                            \n                                    Public\n                                entries\n                            \n                            \n                                    Public\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/types/discoveryscan.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/types/discoveryscan.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiscoveryEntry[]\n\n                    \n                \n                    \n                        \n                                Defined in src/types/discoveryscan.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/discoveryscan.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { DiscoveryEntry } from \"@customtypes/discoveryentry\";\n\nclass DiscoveryScan {\n  public created: Date;\n\n  public hash: string;\n\n  public entries: DiscoveryEntry[];\n\n  constructor() {\n    this.created = new Date();\n    this.hash = \"\";\n    this.entries = [];\n  }\n}\n\nexport { DiscoveryScan };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DnsEntry.html":{"url":"classes/DnsEntry.html","title":"class - DnsEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DnsEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/dnsentry.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                address\n                            \n                            \n                                    Public\n                                host\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/types/dnsentry.ts:4\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/dnsentry.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        host\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/types/dnsentry.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        class DnsEntry {\n  public host: string;\n\n  public address: string;\n\n  constructor() {\n    this.host = \"\";\n    this.address = \"\";\n  }\n}\n\nexport { DnsEntry };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DockerDiscoveryService.html":{"url":"injectables/DockerDiscoveryService.html","title":"injectable - DockerDiscoveryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DockerDiscoveryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/docker.discovery.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createDocker\n                            \n                            \n                                    Private\n                                getContainer\n                            \n                            \n                                    Private\n                                getScheme\n                            \n                            \n                                    Private\n                                resolveNetworks\n                            \n                            \n                                    Private\n                                resolvePorts\n                            \n                            \n                                    Private\n                                resolveSourceAddress\n                            \n                            \n                                    Public\n                                scan\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createDocker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDocker()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/docker.discovery.ts:232\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Docker\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getContainer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContainer(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/docker.discovery.ts:218\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getScheme\n                        \n                    \n                \n            \n            \n                \n                        \n                    getScheme(port: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/docker.discovery.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                port\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        resolveNetworks\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolveNetworks(networksettings: any, networkMode: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/docker.discovery.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                networksettings\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                networkMode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IAddress[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        resolvePorts\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePorts(ports: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/docker.discovery.ts:205\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ports\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        resolveSourceAddress\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolveSourceAddress(entry: DiscoveryEntry, container: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/docker.discovery.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            DiscoveryEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                container\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        scan\n                        \n                    \n                \n            \n            \n                \n                        \n                    scan()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/docker.discovery.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { createHash } from \"node:crypto\";\nimport Docker from \"dockerode\";\nimport { DiscoveryEntry } from \"@discovery/discoveryentry\";\nimport { DiscoveryScan } from \"@discovery/discoveryscan\";\nimport { Address } from \"@customtypes/address\";\nimport { IpUtilities } from \"@helpers/iputilities\";\nimport { IDiscoveryAgent } from \"@types/idiscoveryagent\";\nimport { DiscoveryScan } from \"@types/discoveryscan\";\n\n@Injectable()\nexport class DockerDiscoveryService implements IDiscoveryAgent {\n\n  public scan(): Promise {\n    return new Promise((resolve, reject) => {\n      const result = new DiscoveryScan();\n      const docker = this.createDocker();\n      docker.listContainers((err, containers) => {\n        if (err) {\n          reject(err);\n        } else {\n          const promises: Promise[] = [];\n\n          containers.forEach((container) => {\n            promises.push(this.getContainer(container.Id));\n          });\n\n          Promise.allSettled(promises).then((results) => {\n            const addressPromises: Promise[] = [];\n\n            results.forEach((promise) => {\n              if (promise.status == \"fulfilled\") {\n                const container = promise.value;\n                const networkMode = container.HostConfig.NetworkMode;\n                const record: DiscoveryEntry = {\n                  name: container.Config.Labels[\"homepage.name\"],\n                  description: container.Config.Labels[\"homepage.description\"],\n                  icon: container.Config.Labels[\"homepage.icon\"],\n                  containerName: container.Name,\n                  hostname: container.Config.Hostname,\n                  ports: this.resolvePorts(container.Config.ExposedPorts),\n                  sourceAddress: { network: \"\", address: \"\", preferred: false },\n                  targetAddress: container.Config.Labels[\"homepage.href\"],\n                  ipAddresses: this.resolveNetworks(\n                    container.NetworkSettings,\n                    container.HostConfig.NetworkMode,\n                  ),\n                };\n\n                if (container.Config.Labels[\"homepage.targetaddress\"]) {\n                  record.targetAddress =\n                    container.Config.Labels[\"homepage.targetaddress\"];\n                }\n\n                if (container.Config.Labels[\"homepage.sourceaddress\"]) {\n                  record.sourceAddress.address =\n                    container.Config.Labels[\"homepage.sourceaddress\"];\n                  result.entries.push(record);\n                } else {\n                  if (networkMode.startsWith(\"container:\")) {\n                    const containerId: string = networkMode.split(\":\")[1];\n                    const parentContainer = results\n                      .filter((a) => a.status == \"fulfilled\")\n                      .map((b) => b.value)\n                      .find((c) => c.Id == containerId);\n                    record.ipAddresses = this.resolveNetworks(\n                      parentContainer.NetworkSettings,\n                      parentContainer.HostConfig.NetworkMode,\n                    );\n                    addressPromises.push(\n                      this.resolveSourceAddress(record, parentContainer),\n                    );\n                  } else {\n                    addressPromises.push(\n                      this.resolveSourceAddress(record, container),\n                    );\n                  }\n                }\n              }\n            });\n\n            Promise.allSettled(addressPromises).then((results) => {\n              const fulfilled = results.filter(\n                (res) => res.status === \"fulfilled\",\n              ) as PromiseFulfilledResult[];\n\n              fulfilled.forEach((value) => {\n                result.entries.push(value.value);\n              });\n\n              result.entries.sort((a, b) =>\n                a.containerName.localeCompare(b.containerName),\n              );\n\n              result.hash = createHash(\"sha256\")\n                .update(JSON.stringify(result.entries))\n                .digest(\"base64\");\n              resolve(result);\n            });\n          });\n        }\n      });\n    });\n  }\n\n  private getScheme(port: string): string {\n    if (port == \"443\") {\n      return \"https:\";\n    }\n    return \"http:\";\n  }\n\n  private resolveSourceAddress(\n    entry: DiscoveryEntry,\n    container: any,\n  ): Promise {\n    const iputils: IpUtilities = new IpUtilities();\n    const networks = this.resolveNetworks(\n      container.NetworkSettings,\n      container.HostConfig.NetworkMode,\n    );\n\n    return new Promise((resolve, reject) => {\n      const hostIpAddress = iputils.getHostIpAddress();\n      const result: DiscoveryEntry = entry;\n      if (entry.ports.length == 0) {\n        resolve(result);\n      }\n\n      const promises: Promise[] = [];\n      const preferredNetwork = networks.find((n) => n.preferred);\n\n      entry.ports.forEach((port) => {\n        networks.forEach((addr) => {\n          if (addr.preferred || !preferredNetwork) {\n            const url: IAddress = {\n              preferred: addr.preferred,\n              address: \"\",\n              network: addr.network,\n            };\n            const scheme: string = this.getScheme(port);\n\n            if (addr.address == \"\") {\n              addr.address = hostIpAddress;\n            }\n\n            if (scheme == \"http:\") {\n              url.address = \"http://\" + addr.address + \":\" + port;\n              promises.push(iputils.checkUrlLive(url));\n              //url.address = \"https://\" + addr.address + \":\" + port;\n              //promises.push(iputils.checkUrlLive(url));\n            } else {\n              url.address = scheme + \"//\" + addr.address + \":\" + port;\n              promises.push(iputils.checkUrlLive(url));\n            }\n          }\n        });\n      });\n\n      Promise.any(promises)\n        .then((result) => {\n          entry.sourceAddress = result;\n          if (result.network != \"host\") {\n            const uri = new URL(result.address);\n            entry.sourceAddress.address =\n              uri.protocol +\n              \"//\" +\n              entry.hostname +\n              (uri.port == \"\" ? \"\" : \":\" + uri.port);\n          }\n          resolve(entry);\n        })\n        .catch(() => {\n          entry.sourceAddress.address = \"\";\n          entry.sourceAddress.network = \"\";\n          resolve(entry);\n        });\n    });\n  }\n\n  private resolveNetworks(\n    networksettings: any,\n    networkMode: string,\n  ): IAddress[] {\n    const results: IAddress[] = [];\n    const iputils: IpUtilities = new IpUtilities();\n\n    for (const key of Object.keys(networksettings.Networks)) {\n      const network: any =\n        networksettings.Networks[key as keyof typeof networksettings.Networks];\n      const address: IAddress = {\n        preferred: networkMode == network.NetworkID,\n        network: key as string,\n        address: network.IPAddress,\n      };\n      if (key == \"host\") {\n        address.preferred = true;\n        address.address = iputils.getHostIpAddress();\n      }\n      results.push(address);\n    }\n    return results;\n  }\n\n  private resolvePorts(ports: any): string[] {\n    const results: string[] = [];\n    Object.keys(ports).forEach((key) => {\n      if (!key.includes(\"udp\")) {\n        const currentPort = key.replace(\"/tcp\", \"\");\n        if (!results.includes(currentPort)) {\n          results.push(currentPort);\n        }\n      }\n    });\n    return results;\n  }\n\n  private getContainer(id: string): Promise {\n    return new Promise((resolve, reject) => {\n      const docker = this.createDocker();\n      const container = docker.getContainer(id);\n      container.inspect(function (err, data) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n  }\n\n  private createDocker(): Docker {\n    return new Docker({ socketPath: \"/var/run/docker.sock\" });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAddress.html":{"url":"interfaces/IAddress.html","title":"interface - IAddress","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAddress\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helper/iputilities.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            address\n                                        \n                                \n                                \n                                        \n                                            network\n                                        \n                                \n                                \n                                        \n                                            preferred\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        network\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        network:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preferred\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        preferred:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import dns from \"node:dns\";\nimport os from \"node:os\";\nimport superagent from \"superagent\";\nimport { DiscoveryEntry } from \"@types/discoveryentry\";\nimport { DiscoveryScan } from \"@types/discoveryscan\";\nimport path from \"node:path\";\nimport fs from \"node:fs\";\n\nexport class IpUtilities {\n  private uniqueArray(array) {\n    return Array.from(array.reduce((set, e) => set.add(e), new Set()));\n  }\n\n  public getIpAddress(hostname: string): Promise {\n    return new Promise((resolve, reject) => {\n      const options = { family: 4 };\n      dns.lookup(hostname, options, (err, addr) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(addr);\n        }\n      });\n    });\n  }\n\n  public getHostIpAddress(): string {\n    const networkInterfaces = os.networkInterfaces();\n    for (const interfaceName of Object.keys(networkInterfaces)) {\n      const networkInterface = networkInterfaces[interfaceName];\n      if (networkInterface) {\n        for (const net of networkInterface) {\n          if (net.family === \"IPv4\" && !net.internal) {\n            return net.address;\n          }\n        }\n      }\n    }\n    return \"\";\n  }\n\n  public checkUrlLive(url: IAddress): Promise {\n    return new Promise((resolve, reject) => {\n      console.log(\"Trying\", url.address);\n      superagent\n        .head(url.address)\n        .timeout({\n          deadline: 1000,\n          response: 2000,\n        })\n        .end((err, res) => {\n          if (err) {\n            if (err.status) {\n              console.log(url.address, err.status);\n              resolve(url);\n            } else {\n              reject(err);\n            }\n          } else {\n            console.log(url.address, res.status);\n\n            if (res.status != 500) {\n              resolve(url);\n            } else {\n              reject();\n            }\n          }\n        });\n    });\n  }\n\n  public convertSourceToHostEntry(entry: IDiscoveryEntry): string {\n    if (!entry.sourceAddress || !entry.sourceAddress.address) {\n      return \"\";\n    }\n\n    if (entry.sourceAddress.address == \"\") {\n      return \"\";\n    }\n\n    const addr = entry.ipAddresses.find(\n      (a) => a.network == entry.sourceAddress.network,\n    );\n    if (addr) {\n      return addr.address.padEnd(16, \" \") + \" \" + entry.hostname;\n    }\n    return \"\";\n  }\n\n  public convertSourceToHosts(scan: IDiscoveryScan): string[] {\n    return this.uniqueArray(\n      scan.entries\n        .filter((a) => a.sourceAddress.address != \"\")\n        .sort((a, b) => a.hostname.localeCompare(b.hostname))\n        .map((a) => this.convertSourceToHostEntry(a)),\n    ).filter((a) => a != \"\") as string[];\n  }\n\n  public convertTargetToHostEntry(entry: IDiscoveryEntry): string {\n    if (!entry.targetAddress || entry.targetAddress == \"\") {\n      return \"\";\n    }\n\n    const uri = new URL(entry.targetAddress);\n    const addr = this.getHostIpAddress();\n    return addr.padEnd(16, \" \") + \" \" + uri.hostname;\n  }\n\n  public convertTargetToHosts(scan: IDiscoveryScan): string[] {\n    return this.uniqueArray(\n      scan.entries\n        .filter((a) => a.targetAddress && a.targetAddress != \"\")\n        .sort((a, b) => a.targetAddress.localeCompare(b.targetAddress))\n        .map((a) => this.convertTargetToHostEntry(a)),\n    ).filter((a) => a != \"\") as string[];\n  }\n\n  public saveDNSConfig(e: IDiscoveryEntry) {\n    if (e.targetAddress) {\n      const uri: URL = new URL(e.targetAddress);\n      const filename = path.join(\n        process.env.DNSHOSTS as string,\n        uri.hostname + \".conf\",\n      );\n\n      console.log(this.convertTargetToHostEntry(e));\n      fs.writeFileSync(filename, this.convertTargetToHostEntry(e), {\n        encoding: \"utf8\",\n      });\n    }\n  }\n}\n\nexport interface IAddress {\n  network: string;\n  address: string;\n  preferred: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDiscoveryAgent.html":{"url":"interfaces/IDiscoveryAgent.html","title":"interface - IDiscoveryAgent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDiscoveryAgent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/idiscoveryagent.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        scan\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        scan\n                        \n                    \n                \n            \n            \n                \nscan()\n                \n            \n\n\n                    \n                        \n                            Defined in src/types/idiscoveryagent.ts:4\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DiscoveryScan } from \"@customtypes/discoveryscan\";\n\ninterface IDiscoveryAgent {\n  scan(): Promise;\n}\n\nexport { IDiscoveryAgent };\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDnsManager.html":{"url":"interfaces/IDnsManager.html","title":"interface - IDnsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDnsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/idnsmanager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        contains\n                                    \n                                \n                                \n                                    \n                                        get\n                                    \n                                \n                                \n                                    \n                                        pushToDns\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        resolve\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        contains\n                        \n                    \n                \n            \n            \n                \ncontains(host: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/types/idnsmanager.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                host\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n                    \n                        \n                            Defined in src/types/idnsmanager.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushToDns\n                        \n                    \n                \n            \n            \n                \npushToDns(entry: DnsEntry)\n                \n            \n\n\n                    \n                        \n                            Defined in src/types/idnsmanager.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            DnsEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(entry: DnsEntry)\n                \n            \n\n\n                    \n                        \n                            Defined in src/types/idnsmanager.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            DnsEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(host: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/types/idnsmanager.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                host\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DnsEntry } from \"@customtypes/dnsentry\";\n\ninterface IDnsManager {\n  pushToDns(entry: DnsEntry): Promise;\n  remove(entry: DnsEntry): void;\n  contains(host: string): Promise;\n  resolve(host: string): Promise;\n  get(): Promise;\n}\n\nexport { IDnsManager };\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IpUtilities.html":{"url":"classes/IpUtilities.html","title":"class - IpUtilities","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IpUtilities\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helper/iputilities.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                checkUrlLive\n                            \n                            \n                                    Public\n                                convertSourceToHostEntry\n                            \n                            \n                                    Public\n                                convertSourceToHosts\n                            \n                            \n                                    Public\n                                convertTargetToHostEntry\n                            \n                            \n                                    Public\n                                convertTargetToHosts\n                            \n                            \n                                    Public\n                                getHostIpAddress\n                            \n                            \n                                    Public\n                                getIpAddress\n                            \n                            \n                                    Public\n                                saveDNSConfig\n                            \n                            \n                                    Private\n                                uniqueArray\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        checkUrlLive\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkUrlLive(url: IAddress)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helper/iputilities.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            IAddress\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        convertSourceToHostEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    convertSourceToHostEntry(entry: IDiscoveryEntry)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helper/iputilities.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            IDiscoveryEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        convertSourceToHosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    convertSourceToHosts(scan: IDiscoveryScan)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helper/iputilities.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                scan\n                                            \n                                                            IDiscoveryScan\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        convertTargetToHostEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    convertTargetToHostEntry(entry: IDiscoveryEntry)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helper/iputilities.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            IDiscoveryEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        convertTargetToHosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    convertTargetToHosts(scan: IDiscoveryScan)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helper/iputilities.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                scan\n                                            \n                                                            IDiscoveryScan\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getHostIpAddress\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHostIpAddress()\n                \n            \n\n\n                    \n                        \n                            Defined in src/helper/iputilities.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getIpAddress\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIpAddress(hostname: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helper/iputilities.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                hostname\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        saveDNSConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveDNSConfig(e: IDiscoveryEntry)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helper/iputilities.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                e\n                                            \n                                                            IDiscoveryEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        uniqueArray\n                        \n                    \n                \n            \n            \n                \n                        \n                    uniqueArray(array)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helper/iputilities.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                array\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import dns from \"node:dns\";\nimport os from \"node:os\";\nimport superagent from \"superagent\";\nimport { DiscoveryEntry } from \"@types/discoveryentry\";\nimport { DiscoveryScan } from \"@types/discoveryscan\";\nimport path from \"node:path\";\nimport fs from \"node:fs\";\n\nexport class IpUtilities {\n  private uniqueArray(array) {\n    return Array.from(array.reduce((set, e) => set.add(e), new Set()));\n  }\n\n  public getIpAddress(hostname: string): Promise {\n    return new Promise((resolve, reject) => {\n      const options = { family: 4 };\n      dns.lookup(hostname, options, (err, addr) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(addr);\n        }\n      });\n    });\n  }\n\n  public getHostIpAddress(): string {\n    const networkInterfaces = os.networkInterfaces();\n    for (const interfaceName of Object.keys(networkInterfaces)) {\n      const networkInterface = networkInterfaces[interfaceName];\n      if (networkInterface) {\n        for (const net of networkInterface) {\n          if (net.family === \"IPv4\" && !net.internal) {\n            return net.address;\n          }\n        }\n      }\n    }\n    return \"\";\n  }\n\n  public checkUrlLive(url: IAddress): Promise {\n    return new Promise((resolve, reject) => {\n      console.log(\"Trying\", url.address);\n      superagent\n        .head(url.address)\n        .timeout({\n          deadline: 1000,\n          response: 2000,\n        })\n        .end((err, res) => {\n          if (err) {\n            if (err.status) {\n              console.log(url.address, err.status);\n              resolve(url);\n            } else {\n              reject(err);\n            }\n          } else {\n            console.log(url.address, res.status);\n\n            if (res.status != 500) {\n              resolve(url);\n            } else {\n              reject();\n            }\n          }\n        });\n    });\n  }\n\n  public convertSourceToHostEntry(entry: IDiscoveryEntry): string {\n    if (!entry.sourceAddress || !entry.sourceAddress.address) {\n      return \"\";\n    }\n\n    if (entry.sourceAddress.address == \"\") {\n      return \"\";\n    }\n\n    const addr = entry.ipAddresses.find(\n      (a) => a.network == entry.sourceAddress.network,\n    );\n    if (addr) {\n      return addr.address.padEnd(16, \" \") + \" \" + entry.hostname;\n    }\n    return \"\";\n  }\n\n  public convertSourceToHosts(scan: IDiscoveryScan): string[] {\n    return this.uniqueArray(\n      scan.entries\n        .filter((a) => a.sourceAddress.address != \"\")\n        .sort((a, b) => a.hostname.localeCompare(b.hostname))\n        .map((a) => this.convertSourceToHostEntry(a)),\n    ).filter((a) => a != \"\") as string[];\n  }\n\n  public convertTargetToHostEntry(entry: IDiscoveryEntry): string {\n    if (!entry.targetAddress || entry.targetAddress == \"\") {\n      return \"\";\n    }\n\n    const uri = new URL(entry.targetAddress);\n    const addr = this.getHostIpAddress();\n    return addr.padEnd(16, \" \") + \" \" + uri.hostname;\n  }\n\n  public convertTargetToHosts(scan: IDiscoveryScan): string[] {\n    return this.uniqueArray(\n      scan.entries\n        .filter((a) => a.targetAddress && a.targetAddress != \"\")\n        .sort((a, b) => a.targetAddress.localeCompare(b.targetAddress))\n        .map((a) => this.convertTargetToHostEntry(a)),\n    ).filter((a) => a != \"\") as string[];\n  }\n\n  public saveDNSConfig(e: IDiscoveryEntry) {\n    if (e.targetAddress) {\n      const uri: URL = new URL(e.targetAddress);\n      const filename = path.join(\n        process.env.DNSHOSTS as string,\n        uri.hostname + \".conf\",\n      );\n\n      console.log(this.convertTargetToHostEntry(e));\n      fs.writeFileSync(filename, this.convertTargetToHostEntry(e), {\n        encoding: \"utf8\",\n      });\n    }\n  }\n}\n\nexport interface IAddress {\n  network: string;\n  address: string;\n  preferred: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/controllers/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/helper/iputilities.ts\n            \n            class\n            IpUtilities\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/helper/iputilities.ts\n            \n            interface\n            IAddress\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/services/docker.discovery.ts\n            \n            injectable\n            DockerDiscoveryService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/types/address.ts\n            \n            class\n            Address\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/types/discoveryentry.ts\n            \n            class\n            DiscoveryEntry\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/types/discoveryscan.ts\n            \n            class\n            DiscoveryScan\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/types/dnsentry.ts\n            \n            class\n            DnsEntry\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/idiscoveryagent.ts\n            \n            interface\n            IDiscoveryAgent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/types/idnsmanager.ts\n            \n            interface\n            IDnsManager\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @fastify/static : ^6.4.0\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/platform-fastify : ^10.4.6\n        \n            @nestjs/schedule : ^4.1.1\n        \n            @nestjs/serve-static : ^4.0.2\n        \n            @nestjs/swagger : ^7.4.2\n        \n            @scalar/nestjs-api-reference : ^0.3.166\n        \n            dockerode : ^4.0.2\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : The DiscovrNinja service\n        \n            License : GNU\n        \n            Author : guidcruncher\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
